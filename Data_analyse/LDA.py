import numpy as np
import matplotlib.pyplot as plt


def add(set1, set2):
    result = [0, 0]
    for i in range(0, len(set1)):
        result[i] = set1[i] + set2[i]
    return result


def div(set1, number):
    result = [0, 0]
    for i in range(0, len(set1)):
        result[i] = set1[i] / number
    return result


def calculate_Sb(average_all, average_list, label_num_list):
    for i in range(0, len(average_list)):
        print(average_list[i], label_num_list[i])
        temp = np.subtract(np.matrix(average_list[i]), np.matrix(average_all))
        if i == 0:
            result = np.multiply(label_num_list[i], np.matmul(temp.transpose(), temp))
        else:
            result = np.add(result, np.multiply(label_num_list[i], np.matmul(temp.transpose(), temp)))
    print("Sb:", result)
    return result


def calculate_Sw(average_list, data_list):
    for i in range(0, len(data_list)):
        temp = np.subtract(np.matrix([data_list[i][2], data_list[i][1]]), np.matrix(average_list[data_list[i][3]]))
        if i == 0:

            result = np.multiply(temp.transpose(), temp)
        else:
            result = np.add(result, np.multiply(temp.transpose(), temp))
    print("Sw:", result)
    return result


def data_2_picture(x_list, y_list):
    plt.figure(figsize=(10, 10), dpi=100)
    plt.scatter(x_list, y_list)
    plt.show()
    pass


if __name__ == '__main__':
    data = [[136, 180, 0.76, 2], [151, 180, 0.84, 2], [54, 56, 0.96, 0], [154, 180, 0.86, 2], [168, 180, 0.93, 2],
            [144, 168, 0.86, 2], [121, 126, 0.96, 2], [154, 180, 0.86, 2], [156, 162, 0.96, 2], [171, 180, 0.95, 2], [161, 180, 0.89, 2], [177, 183, 0.97, 2], [176, 180, 0.98, 2], [175, 180, 0.97, 2], [175, 180, 0.97, 2], [167, 180, 0.93, 2], [175, 180, 0.97, 2], [115, 122, 0.94, 2], [143, 180, 0.79, 2], [174, 180, 0.97, 2], [127, 132, 0.96, 2], [166, 180, 0.92, 2], [168, 174, 0.97, 2], [166, 180, 0.92, 2], [85, 90, 0.94, 1], [168, 180, 0.93, 2], [44, 48, 0.92, 0], [159, 168, 0.95, 2], [168, 180, 0.93, 2], [172, 180, 0.96, 2], [163, 180, 0.91, 2], [174, 180, 0.97, 2], [97, 102, 0.95, 1], [149, 156, 0.96, 2], [65, 66, 0.98, 1], [141, 180, 0.78, 2], [177, 180, 0.98, 2], [177, 180, 0.98, 2], [93, 108, 0.86, 1], [147, 180, 0.82, 2], [172, 180, 0.96, 2], [75, 90, 0.83, 1], [171, 180, 0.95, 2], [171, 180, 0.95, 2], [75, 84, 0.89, 1], [167, 180, 0.93, 2], [163, 168, 0.97, 2], [163, 180, 0.91, 2], [99, 102, 0.97, 1], [167, 180, 0.93, 2], [83, 90, 0.92, 1], [166, 180, 0.92, 2], [142, 180, 0.79, 2], [165, 180, 0.92, 2], [64, 72, 0.89, 1], [76, 84, 0.9, 1], [144, 181, 0.8, 2], [139, 156, 0.89, 2], [146, 162, 0.9, 2], [155, 180, 0.86, 2], [123, 126, 0.98, 2], [163, 180, 0.91, 2], [35, 36, 0.97, 0], [30, 36, 0.83, 0], [159, 180, 0.88, 2], [175, 180, 0.97, 2], [166, 180, 0.92, 2], [165, 180, 0.92, 2], [122, 150, 0.81, 2], [155, 180, 0.86, 2], [144, 162, 0.89, 2], [148, 180, 0.82, 2], [83, 90, 0.92, 1], [155, 180, 0.86, 2], [155, 180, 0.86, 2], [137, 144, 0.95, 2], [148, 180, 0.82, 2], [175, 180, 0.97, 2], [153, 180, 0.85, 2], [40, 48, 0.83, 0], [152, 192, 0.79, 2], [135, 180, 0.75, 2], [167, 180, 0.93, 2], [148, 180, 0.82, 2], [43, 48, 0.9, 0], [114, 120, 0.95, 1], [174, 180, 0.97, 2], [115, 126, 0.91, 2], [133, 150, 0.89, 2], [107, 129, 0.83, 2], [153, 180, 0.85, 2], [171, 180, 0.95, 2], [129, 132, 0.98, 2], [169, 180, 0.94, 2], [168, 180, 0.93, 2], [132, 180, 0.73, 2], [39, 42, 0.93, 0], [104, 108, 0.96, 1], [127, 132, 0.96, 2], [89, 96, 0.93, 1], [44, 49, 0.9, 0], [103, 108, 0.95, 1], [32, 36, 0.89, 0], [177, 180, 0.98, 2], [140, 180, 0.78, 2], [58, 63, 0.92, 1], [75, 96, 0.78, 1], [40, 45, 0.89, 0], [80, 84, 0.95, 1], [159, 180, 0.88, 2], [87, 96, 0.91, 1], [97, 116, 0.84, 1], [123, 132, 0.93, 2], [164, 180, 0.91, 2], [32, 34, 0.94, 0], [176, 180, 0.98, 2], [28, 36, 0.78, 0], [174, 180, 0.97, 2], [66, 84, 0.79, 1], [125, 132, 0.95, 2], [84, 90, 0.93, 1], [175, 180, 0.97, 2], [113, 120, 0.94, 1], [147, 150, 0.98, 2], [112, 120, 0.93, 1], [175, 180, 0.97, 2], [152, 157, 0.97, 2], [95, 102, 0.93, 1], [84, 102, 0.82, 1], [113, 120, 0.94, 1], [77, 84, 0.92, 1], [150, 168, 0.89, 2], [111, 114, 0.97, 1], [104, 118, 0.88, 1], [167, 180, 0.93, 2], [90, 96, 0.94, 1], [137, 144, 0.95, 2], [163, 180, 0.91, 2], [53, 84, 0.63, 1], [96, 132, 0.73, 2], [141, 148, 0.95, 2], [57, 84, 0.68, 1], [62, 90, 0.69, 1], [167, 180, 0.93, 2], [110, 126, 0.87, 2], [141, 168, 0.84, 2], [92, 108, 0.85, 1], [108, 132, 0.82, 2], [150, 156, 0.96, 2], [145, 168, 0.86, 2], [160, 180, 0.89, 2], [84, 101, 0.83, 1], [75, 84, 0.89, 1], [80, 88, 0.91, 1], [168, 180, 0.93, 2], [94, 120, 0.78, 1], [167, 180, 0.93, 2], [170, 180, 0.94, 2], [150, 156, 0.96, 2], [115, 120, 0.96, 1], [150, 162, 0.93, 2], [173, 180, 0.96, 2], [35, 42, 0.83, 0], [154, 180, 0.86, 2], [137, 180, 0.76, 2], [138, 180, 0.77, 2], [148, 155, 0.95, 2], [82, 90, 0.91, 1], [78, 96, 0.81, 1], [133, 180, 0.74, 2], [167, 180, 0.93, 2], [121, 144, 0.84, 2], [159, 180, 0.88, 2], [86, 102, 0.84, 1], [137, 180, 0.76, 2], [140, 180, 0.78, 2], [95, 102, 0.93, 1], [125, 132, 0.95, 2], [174, 180, 0.97, 2], [31, 36, 0.86, 0], [175, 180, 0.97, 2], [82, 90, 0.91, 1], [78, 96, 0.81, 1], [133, 180, 0.74, 2], [167, 180, 0.93, 2], [121, 144, 0.84, 2], [159, 180, 0.88, 2], [86, 102, 0.84, 1], [137, 180, 0.76, 2], [140, 180, 0.78, 2], [95, 102, 0.93, 1], [125, 132, 0.95, 2], [174, 180, 0.97, 2], [176, 180, 0.98, 2], [175, 180, 0.97, 2], [78, 101, 0.77, 1], [167, 204, 0.82, 2], [93, 98, 0.95, 1], [174, 180, 0.97, 2], [125, 137, 0.91, 2], [127, 143, 0.89, 2], [155, 180, 0.86, 2], [174, 180, 0.97, 2], [144, 168, 0.86, 2], [175, 180, 0.97, 2], [47, 48, 0.98, 0], [114, 137, 0.83, 2], [165, 180, 0.92, 2], [167, 180, 0.93, 2], [66, 84, 0.79, 1], [139, 180, 0.77, 2], [118, 132, 0.89, 2], [136, 180, 0.76, 2], [129, 144, 0.9, 2], [135, 180, 0.75, 2], [90, 102, 0.88, 1], [124, 180, 0.69, 2], [165, 180, 0.92, 2], [84, 108, 0.78, 1], [35, 36, 0.97, 0], [69, 84, 0.82, 1], [156, 161, 0.97, 2], [97, 132, 0.73, 2], [166, 180, 0.92, 2], [142, 180, 0.79, 2], [174, 180, 0.97, 2], [207, 240, 0.86, 2], [174, 180, 0.97, 2], [33, 39, 0.85, 0], [70, 92, 0.76, 1], [112, 126, 0.89, 2], [165, 180, 0.92, 2], [134, 168, 0.8, 2], [175, 180, 0.97, 2], [60, 66, 0.91, 1], [35, 40, 0.88, 0], [81, 88, 0.92, 1], [64, 72, 0.89, 1], [64, 72, 0.89, 1], [129, 156, 0.83, 2], [153, 180, 0.85, 2], [126, 162, 0.78, 2], [36, 48, 0.75, 0], [112, 120, 0.93, 1], [144, 180, 0.8, 2], [144, 180, 0.8, 2], [24, 37, 0.65, 0], [71, 108, 0.66, 1], [27, 41, 0.66, 0], [80, 93, 0.86, 1], [122, 144, 0.85, 2], [165, 180, 0.92, 2], [119, 144, 0.83, 2], [163, 180, 0.91, 2], [85, 120, 0.71, 1], [33, 48, 0.69, 0], [43, 48, 0.9, 0], [170, 180, 0.94, 2], [80, 93, 0.86, 1], [52, 60, 0.87, 0], [40, 50, 0.8, 0], [106, 144, 0.74, 2], [127, 180, 0.71, 2], [111, 132, 0.84, 2], [142, 156, 0.91, 2], [116, 156, 0.74, 2], [100, 144, 0.69, 2], [26, 44, 0.59, 0], [112, 156, 0.72, 2], [27, 36, 0.75, 0], [73, 108, 0.68, 1], [85, 96, 0.89, 1], [142, 180, 0.79, 2], [25, 42, 0.6, 0], [122, 138, 0.88, 2], [170, 180, 0.94, 2], [92, 120, 0.77, 1], [162, 180, 0.9, 2], [92, 108, 0.85, 1], [144, 168, 0.86, 2], [137, 180, 0.76, 2], [164, 180, 0.91, 2], [115, 144, 0.8, 2], [161, 180, 0.89, 2], [148, 180, 0.82, 2], [107, 144, 0.74, 2], [162, 180, 0.9, 2], [144, 180, 0.8, 2], [138, 156, 0.88, 2], [162, 180, 0.9, 2], [82, 96, 0.85, 1], [85, 96, 0.89, 1], [161, 180, 0.89, 2], [151, 161, 0.94, 2], [102, 120, 0.85, 1], [74, 96, 0.77, 1], [153, 180, 0.85, 2], [41, 48, 0.85, 0], [65, 84, 0.77, 1], [149, 180, 0.83, 2], [158, 180, 0.88, 2], [58, 72, 0.81, 1], [164, 180, 0.91, 2], [72, 84, 0.86, 1], [75, 97, 0.77, 1], [92, 108, 0.85, 1], [159, 180, 0.88, 2], [49, 66, 0.74, 1], [32, 42, 0.76, 0], [102, 108, 0.94, 1], [123, 156, 0.79, 2], [30, 36, 0.83, 0], [70, 87, 0.8, 1], [147, 180, 0.82, 2], [83, 108, 0.77, 1], [144, 156, 0.92, 2], [96, 102, 0.94, 1], [39, 48, 0.81, 0], [101, 108, 0.94, 1], [39, 44, 0.89, 0], [115, 132, 0.87, 2], [25, 37, 0.68, 0], [43, 48, 0.9, 0], [42, 45, 0.93, 0], [84, 102, 0.82, 1], [83, 96, 0.86, 1], [92, 108, 0.85, 1], [92, 108, 0.85, 1], [97, 117, 0.83, 1], [171, 180, 0.95, 2], [101, 120, 0.84, 1], [135, 180, 0.75, 2], [151, 180, 0.84, 2], [138, 156, 0.88, 2], [171, 180, 0.95, 2], [101, 120, 0.84, 1], [146, 180, 0.81, 2], [135, 180, 0.75, 2], [151, 180, 0.84, 2], [89, 99, 0.9, 1], [138, 156, 0.88, 2], [112, 132, 0.85, 2], [99, 120, 0.82, 1], [130, 138, 0.94, 2], [158, 180, 0.88, 2], [147, 180, 0.82, 2], [175, 180, 0.97, 2], [161, 180, 0.89, 2], [105, 120, 0.88, 1], [164, 180, 0.91, 2], [74, 84, 0.88, 1], [150, 156, 0.96, 2], [168, 180, 0.93, 2], [168, 180, 0.93, 2], [116, 126, 0.92, 2], [52, 60, 0.87, 0], [114, 144, 0.79, 2], [30, 36, 0.83, 0], [156, 180, 0.87, 2], [141, 180, 0.78, 2], [164, 180, 0.91, 2], [103, 120, 0.86, 1], [114, 120, 0.95, 1], [148, 180, 0.82, 2], [176, 180, 0.98, 2], [129, 168, 0.77, 2], [36, 48, 0.75, 0], [167, 180, 0.93, 2], [160, 180, 0.89, 2], [134, 156, 0.86, 2], [75, 84, 0.89, 1], [132, 144, 0.92, 2], [175, 180, 0.97, 2], [92, 168, 0.55, 2], [64, 90, 0.71, 1], [165, 180, 0.92, 2], [101, 132, 0.77, 2], [159, 180, 0.88, 2], [212, 216, 0.98, 2], [174, 180, 0.97, 2], [168, 180, 0.93, 2], [170, 180, 0.94, 2], [89, 108, 0.82, 1], [176, 180, 0.98, 2], [163, 168, 0.97, 2], [89, 96, 0.93, 1], [127, 144, 0.88, 2], [127, 156, 0.81, 2], [67, 96, 0.7, 1], [22, 28, 0.79, 0], [75, 84, 0.89, 1], [186, 192, 0.97, 2], [65, 90, 0.72, 1], [71, 84, 0.85, 1], [167, 180, 0.93, 2], [77, 90, 0.86, 1], [149, 180, 0.83, 2], [156, 183, 0.85, 2], [53, 57, 0.93, 0], [94, 110, 0.85, 1], [85, 96, 0.89, 1], [49, 54, 0.91, 0], [142, 180, 0.79, 2], [33, 39, 0.85, 0], [108, 126, 0.86, 2], [170, 180, 0.94, 2], [92, 108, 0.85, 1], [162, 180, 0.9, 2], [138, 180, 0.77, 2], [151, 156, 0.97, 2], [166, 180, 0.92, 2], [96, 102, 0.94, 1], [160, 180, 0.89, 2], [45, 51, 0.88, 0], [134, 156, 0.86, 2], [85, 102, 0.83, 1], [155, 180, 0.86, 2], [157, 162, 0.97, 2], [133, 161, 0.83, 2], [156, 168, 0.93, 2], [75, 94, 0.8, 1], [82, 96, 0.85, 1], [164, 180, 0.91, 2], [73, 84, 0.87, 1], [145, 168, 0.86, 2], [176, 180, 0.98, 2], [114, 120, 0.95, 1], [183, 186, 0.98, 2], [146, 180, 0.81, 2], [70, 84, 0.83, 1], [149, 162, 0.92, 2], [96, 108, 0.89, 1], [161, 180, 0.89, 2], [143, 156, 0.92, 2], [83, 90, 0.92, 1], [150, 156, 0.96, 2], [167, 180, 0.93, 2], [166, 180, 0.92, 2], [156, 180, 0.87, 2], [141, 180, 0.78, 2], [73, 90, 0.81, 1], [169, 180, 0.94, 2], [157, 180, 0.87, 2], [72, 84, 0.86, 1], [162, 180, 0.9, 2], [124, 132, 0.94, 2], [157, 180, 0.87, 2], [141, 168, 0.84, 2]]

    # 将数据按照初始判定时间分为了三类，其中0表示小于等于5年的，1表示大于5年小于等于10年的，2表示大于十年的(不包括无期徒刑)
    sum_level_0 = [0, 0]
    sum_level_1 = [0, 0]
    sum_level_2 = [0, 0]
    summary = [0, 0]
    num_level_0 = 0
    num_level_1 = 0
    num_level_2 = 0
    num = 0
    for item in data:
        if item[3] == 0:
            sum_level_0 = add(sum_level_0, (item[2], item[1]))
            num_level_0 += 1
        if item[3] == 1:
            sum_level_1 = add(sum_level_1, (item[2], item[1]))
            num_level_1 += 1
        if item[3] == 2:
            sum_level_2 = add(sum_level_2, (item[2], item[1]))
            num_level_2 += 1
        summary = add(summary, (item[2], item[1]))
        num += 1
    # 计算lda降维所需要用到的每类数据向量的均值
    average_0 = div(sum_level_0, num_level_0)
    average_1 = div(sum_level_1, num_level_1)
    average_2 = div(sum_level_2, num_level_2)
    average = div(summary, num)
    # 计算类内散度矩阵
    Sb = calculate_Sb(average, [average_0, average_1, average_2], [num_level_0, num_level_1, num_level_2])
    # 计算类间散度矩阵
    Sw = calculate_Sw([average_0, average_1, average_2], data)
    # 计算Sw的逆矩阵与Sb的矩阵乘积
    Sw_inverse_Sb = np.matmul(Sw.I, Sb)
    # 计算生成矩阵W的d个最大特征值与对应的特征向量，此处d取1
    eiginValue, featureVector = np.linalg.eig(Sw_inverse_Sb)
    featureVector_max = [featureVector.tolist()[0][1], featureVector.tolist()[1][1]]
    # 由含有分类等多有原数据的初始数据，得到数据矩阵data_matrix，第一列为百分比，第二列为初始量刑(单位：月)
    x_list = []
    y_list = []
    empty = []
    for item in data:
        x_list.append(item[1])
        y_list.append(item[2])
        empty.append(0)
    data_matrix = np.matrix([y_list, x_list]).transpose()
    # 进行W与data_matrix的计算，得到进行lda降维后的数据
    lda_data = np.matmul(np.matrix(featureVector_max), data_matrix.transpose())
    # 初始数据散点图，x轴为初始量刑(单位：月)，y为百分比
    data_2_picture(x_list, y_list)
    #
    data_2_picture(y_list, lda_data.tolist())
    print(data_matrix)
    print(lda_data.transpose())

